//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiTEColones
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TEColonesEntities : DbContext
    {
        public TEColonesEntities()
            : base("name=TEColonesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administradors { get; set; }
        public virtual DbSet<BitacoraBeneficio> BitacoraBeneficios { get; set; }
        public virtual DbSet<BitacoraMaterial> BitacoraMaterials { get; set; }
        public virtual DbSet<BitacoraPromocion> BitacoraPromocions { get; set; }
        public virtual DbSet<CambioBeneficioEstudiante> CambioBeneficioEstudiantes { get; set; }
        public virtual DbSet<CambioMaterialEstudiante> CambioMaterialEstudiantes { get; set; }
        public virtual DbSet<CentroAcopio> CentroAcopios { get; set; }
        public virtual DbSet<Departamento> Departamentoes { get; set; }
        public virtual DbSet<EncargadoCentroAcopio> EncargadoCentroAcopios { get; set; }
        public virtual DbSet<Estudiante> Estudiantes { get; set; }
        public virtual DbSet<InformacionBasica> InformacionBasicas { get; set; }
        public virtual DbSet<InformacionBasicaContacto> InformacionBasicaContactoes { get; set; }
        public virtual DbSet<Promocion> Promocions { get; set; }
        public virtual DbSet<SedeXTEC> SedeXTECs { get; set; }
        public virtual DbSet<TipoBeneficio> TipoBeneficios { get; set; }
        public virtual DbSet<TipoContacto> TipoContactoes { get; set; }
        public virtual DbSet<TipoMaterial> TipoMaterials { get; set; }
        public virtual DbSet<TipoRol> TipoRols { get; set; }
    
        public virtual ObjectResult<ActualizarTipo_Result> ActualizarTipo(string idTipo, string nombreTabla, string nombreColumna, string datoNuevo)
        {
            var idTipoParameter = idTipo != null ?
                new ObjectParameter("IdTipo", idTipo) :
                new ObjectParameter("IdTipo", typeof(string));
    
            var nombreTablaParameter = nombreTabla != null ?
                new ObjectParameter("NombreTabla", nombreTabla) :
                new ObjectParameter("NombreTabla", typeof(string));
    
            var nombreColumnaParameter = nombreColumna != null ?
                new ObjectParameter("NombreColumna", nombreColumna) :
                new ObjectParameter("NombreColumna", typeof(string));
    
            var datoNuevoParameter = datoNuevo != null ?
                new ObjectParameter("DatoNuevo", datoNuevo) :
                new ObjectParameter("DatoNuevo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActualizarTipo_Result>("ActualizarTipo", idTipoParameter, nombreTablaParameter, nombreColumnaParameter, datoNuevoParameter);
        }
    
        public virtual ObjectResult<CambioBeneficio_Result> CambioBeneficio(string identificacionEstudiante, string tipoBeneficio, Nullable<double> tecolonesCambio, Nullable<double> colonesAdquiridos, Nullable<System.DateTime> fechaCambio)
        {
            var identificacionEstudianteParameter = identificacionEstudiante != null ?
                new ObjectParameter("IdentificacionEstudiante", identificacionEstudiante) :
                new ObjectParameter("IdentificacionEstudiante", typeof(string));
    
            var tipoBeneficioParameter = tipoBeneficio != null ?
                new ObjectParameter("TipoBeneficio", tipoBeneficio) :
                new ObjectParameter("TipoBeneficio", typeof(string));
    
            var tecolonesCambioParameter = tecolonesCambio.HasValue ?
                new ObjectParameter("TecolonesCambio", tecolonesCambio) :
                new ObjectParameter("TecolonesCambio", typeof(double));
    
            var colonesAdquiridosParameter = colonesAdquiridos.HasValue ?
                new ObjectParameter("ColonesAdquiridos", colonesAdquiridos) :
                new ObjectParameter("ColonesAdquiridos", typeof(double));
    
            var fechaCambioParameter = fechaCambio.HasValue ?
                new ObjectParameter("FechaCambio", fechaCambio) :
                new ObjectParameter("FechaCambio", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CambioBeneficio_Result>("CambioBeneficio", identificacionEstudianteParameter, tipoBeneficioParameter, tecolonesCambioParameter, colonesAdquiridosParameter, fechaCambioParameter);
        }
    
        public virtual ObjectResult<CambioMaterial_Result> CambioMaterial(string identificacionEstudiante, string dIdentificadorCentroAcopio, string identificacionEncargado, string tipoMaterial, Nullable<System.DateTime> fechaCambio, Nullable<double> pesoCambio, Nullable<double> tecolonesAdquiridos)
        {
            var identificacionEstudianteParameter = identificacionEstudiante != null ?
                new ObjectParameter("IdentificacionEstudiante", identificacionEstudiante) :
                new ObjectParameter("IdentificacionEstudiante", typeof(string));
    
            var dIdentificadorCentroAcopioParameter = dIdentificadorCentroAcopio != null ?
                new ObjectParameter("DIdentificadorCentroAcopio", dIdentificadorCentroAcopio) :
                new ObjectParameter("DIdentificadorCentroAcopio", typeof(string));
    
            var identificacionEncargadoParameter = identificacionEncargado != null ?
                new ObjectParameter("IdentificacionEncargado", identificacionEncargado) :
                new ObjectParameter("IdentificacionEncargado", typeof(string));
    
            var tipoMaterialParameter = tipoMaterial != null ?
                new ObjectParameter("TipoMaterial", tipoMaterial) :
                new ObjectParameter("TipoMaterial", typeof(string));
    
            var fechaCambioParameter = fechaCambio.HasValue ?
                new ObjectParameter("FechaCambio", fechaCambio) :
                new ObjectParameter("FechaCambio", typeof(System.DateTime));
    
            var pesoCambioParameter = pesoCambio.HasValue ?
                new ObjectParameter("PesoCambio", pesoCambio) :
                new ObjectParameter("PesoCambio", typeof(double));
    
            var tecolonesAdquiridosParameter = tecolonesAdquiridos.HasValue ?
                new ObjectParameter("TecolonesAdquiridos", tecolonesAdquiridos) :
                new ObjectParameter("TecolonesAdquiridos", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CambioMaterial_Result>("CambioMaterial", identificacionEstudianteParameter, dIdentificadorCentroAcopioParameter, identificacionEncargadoParameter, tipoMaterialParameter, fechaCambioParameter, pesoCambioParameter, tecolonesAdquiridosParameter);
        }
    
        public virtual ObjectResult<InsertarAdministrador_Result> InsertarAdministrador(string nombre, string primerApellido, string segundoApellido, string identificacion, string correo, string contraseña, string telefono, string nombreRol, string nombreDepartamento)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("NombreRol", nombreRol) :
                new ObjectParameter("NombreRol", typeof(string));
    
            var nombreDepartamentoParameter = nombreDepartamento != null ?
                new ObjectParameter("NombreDepartamento", nombreDepartamento) :
                new ObjectParameter("NombreDepartamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarAdministrador_Result>("InsertarAdministrador", nombreParameter, primerApellidoParameter, segundoApellidoParameter, identificacionParameter, correoParameter, contraseñaParameter, telefonoParameter, nombreRolParameter, nombreDepartamentoParameter);
        }
    
        public virtual ObjectResult<InsertarAdministradorAcopio_Result> InsertarAdministradorAcopio(string nombre, string primerApellido, string segundoApellido, string identificacion, string correo, string contraseña, string telefono, string nombreRol, string identificadorCentroAcopio)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("NombreRol", nombreRol) :
                new ObjectParameter("NombreRol", typeof(string));
    
            var identificadorCentroAcopioParameter = identificadorCentroAcopio != null ?
                new ObjectParameter("IdentificadorCentroAcopio", identificadorCentroAcopio) :
                new ObjectParameter("IdentificadorCentroAcopio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarAdministradorAcopio_Result>("InsertarAdministradorAcopio", nombreParameter, primerApellidoParameter, segundoApellidoParameter, identificacionParameter, correoParameter, contraseñaParameter, telefonoParameter, nombreRolParameter, identificadorCentroAcopioParameter);
        }
    
        public virtual ObjectResult<InsertarCentroAcopio_Result> InsertarCentroAcopio(string nombreSede, string ubicacion, string identificador)
        {
            var nombreSedeParameter = nombreSede != null ?
                new ObjectParameter("NombreSede", nombreSede) :
                new ObjectParameter("NombreSede", typeof(string));
    
            var ubicacionParameter = ubicacion != null ?
                new ObjectParameter("Ubicacion", ubicacion) :
                new ObjectParameter("Ubicacion", typeof(string));
    
            var identificadorParameter = identificador != null ?
                new ObjectParameter("Identificador", identificador) :
                new ObjectParameter("Identificador", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarCentroAcopio_Result>("InsertarCentroAcopio", nombreSedeParameter, ubicacionParameter, identificadorParameter);
        }
    
        public virtual ObjectResult<InsertarContacto_Result> InsertarContacto(string contacto, string identificacion, string tipoContacto)
        {
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var tipoContactoParameter = tipoContacto != null ?
                new ObjectParameter("TipoContacto", tipoContacto) :
                new ObjectParameter("TipoContacto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarContacto_Result>("InsertarContacto", contactoParameter, identificacionParameter, tipoContactoParameter);
        }
    
        public virtual ObjectResult<InsertarDepartamento_Result> InsertarDepartamento(string nombreDepartamento)
        {
            var nombreDepartamentoParameter = nombreDepartamento != null ?
                new ObjectParameter("NombreDepartamento", nombreDepartamento) :
                new ObjectParameter("NombreDepartamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarDepartamento_Result>("InsertarDepartamento", nombreDepartamentoParameter);
        }
    
        public virtual ObjectResult<InsertarEstudiante_Result> InsertarEstudiante(string nombre, string primerApellido, string segundoApellido, string identificacion, string correo, string contraseña, string telefono, string nombreRol, Nullable<System.DateTime> fechaIncorporacion, string pasatiempo, string nombreSedeXTEC)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("NombreRol", nombreRol) :
                new ObjectParameter("NombreRol", typeof(string));
    
            var fechaIncorporacionParameter = fechaIncorporacion.HasValue ?
                new ObjectParameter("FechaIncorporacion", fechaIncorporacion) :
                new ObjectParameter("FechaIncorporacion", typeof(System.DateTime));
    
            var pasatiempoParameter = pasatiempo != null ?
                new ObjectParameter("Pasatiempo", pasatiempo) :
                new ObjectParameter("Pasatiempo", typeof(string));
    
            var nombreSedeXTECParameter = nombreSedeXTEC != null ?
                new ObjectParameter("NombreSedeXTEC", nombreSedeXTEC) :
                new ObjectParameter("NombreSedeXTEC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarEstudiante_Result>("InsertarEstudiante", nombreParameter, primerApellidoParameter, segundoApellidoParameter, identificacionParameter, correoParameter, contraseñaParameter, telefonoParameter, nombreRolParameter, fechaIncorporacionParameter, pasatiempoParameter, nombreSedeXTECParameter);
        }
    
        public virtual ObjectResult<InsertarInformacionBasica_Result> InsertarInformacionBasica(string nombre, string primerApellido, string segundoApellido, string identificacion, string correo, string contraseña, string telefono, string nombreRol, ObjectParameter idInformacionBasica)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("NombreRol", nombreRol) :
                new ObjectParameter("NombreRol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarInformacionBasica_Result>("InsertarInformacionBasica", nombreParameter, primerApellidoParameter, segundoApellidoParameter, identificacionParameter, correoParameter, contraseñaParameter, telefonoParameter, nombreRolParameter, idInformacionBasica);
        }
    
        public virtual ObjectResult<InsertarSedeXTEC_Result> InsertarSedeXTEC(string nombreSedeXTEC, string ubicacionSede)
        {
            var nombreSedeXTECParameter = nombreSedeXTEC != null ?
                new ObjectParameter("NombreSedeXTEC", nombreSedeXTEC) :
                new ObjectParameter("NombreSedeXTEC", typeof(string));
    
            var ubicacionSedeParameter = ubicacionSede != null ?
                new ObjectParameter("UbicacionSede", ubicacionSede) :
                new ObjectParameter("UbicacionSede", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarSedeXTEC_Result>("InsertarSedeXTEC", nombreSedeXTECParameter, ubicacionSedeParameter);
        }
    
        public virtual ObjectResult<InsertarTipoContacto_Result> InsertarTipoContacto(string nombreTipoContacto)
        {
            var nombreTipoContactoParameter = nombreTipoContacto != null ?
                new ObjectParameter("NombreTipoContacto", nombreTipoContacto) :
                new ObjectParameter("NombreTipoContacto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarTipoContacto_Result>("InsertarTipoContacto", nombreTipoContactoParameter);
        }
    
        public virtual ObjectResult<InsertarTipoRol_Result> InsertarTipoRol(string nombreRol)
        {
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("NombreRol", nombreRol) :
                new ObjectParameter("NombreRol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertarTipoRol_Result>("InsertarTipoRol", nombreRolParameter);
        }
    
        public virtual ObjectResult<NuevaPromocion_Result> NuevaPromocion(string nombrePromocion, string descripcionPromocion, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var nombrePromocionParameter = nombrePromocion != null ?
                new ObjectParameter("NombrePromocion", nombrePromocion) :
                new ObjectParameter("NombrePromocion", typeof(string));
    
            var descripcionPromocionParameter = descripcionPromocion != null ?
                new ObjectParameter("DescripcionPromocion", descripcionPromocion) :
                new ObjectParameter("DescripcionPromocion", typeof(string));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NuevaPromocion_Result>("NuevaPromocion", nombrePromocionParameter, descripcionPromocionParameter, fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<NuevoTipoBeneficio_Result> NuevoTipoBeneficio(string nombreBeneficio, string descripcionBeneficio, Nullable<double> cantidadBaseTEColones)
        {
            var nombreBeneficioParameter = nombreBeneficio != null ?
                new ObjectParameter("NombreBeneficio", nombreBeneficio) :
                new ObjectParameter("NombreBeneficio", typeof(string));
    
            var descripcionBeneficioParameter = descripcionBeneficio != null ?
                new ObjectParameter("DescripcionBeneficio", descripcionBeneficio) :
                new ObjectParameter("DescripcionBeneficio", typeof(string));
    
            var cantidadBaseTEColonesParameter = cantidadBaseTEColones.HasValue ?
                new ObjectParameter("CantidadBaseTEColones", cantidadBaseTEColones) :
                new ObjectParameter("CantidadBaseTEColones", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NuevoTipoBeneficio_Result>("NuevoTipoBeneficio", nombreBeneficioParameter, descripcionBeneficioParameter, cantidadBaseTEColonesParameter);
        }
    
        public virtual ObjectResult<NuevoTipoMaterial_Result> NuevoTipoMaterial(string nombreTipoMaterial, string caracteristicaMaterial, Nullable<double> pesoBaseMaterial, Nullable<double> equivalenciaTEColones)
        {
            var nombreTipoMaterialParameter = nombreTipoMaterial != null ?
                new ObjectParameter("NombreTipoMaterial", nombreTipoMaterial) :
                new ObjectParameter("NombreTipoMaterial", typeof(string));
    
            var caracteristicaMaterialParameter = caracteristicaMaterial != null ?
                new ObjectParameter("CaracteristicaMaterial", caracteristicaMaterial) :
                new ObjectParameter("CaracteristicaMaterial", typeof(string));
    
            var pesoBaseMaterialParameter = pesoBaseMaterial.HasValue ?
                new ObjectParameter("PesoBaseMaterial", pesoBaseMaterial) :
                new ObjectParameter("PesoBaseMaterial", typeof(double));
    
            var equivalenciaTEColonesParameter = equivalenciaTEColones.HasValue ?
                new ObjectParameter("EquivalenciaTEColones", equivalenciaTEColones) :
                new ObjectParameter("EquivalenciaTEColones", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NuevoTipoMaterial_Result>("NuevoTipoMaterial", nombreTipoMaterialParameter, caracteristicaMaterialParameter, pesoBaseMaterialParameter, equivalenciaTEColonesParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Tacometro()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Tacometro");
        }
    
        public virtual ObjectResult<ColumnaSimple_Result> ColumnaSimple()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ColumnaSimple_Result>("ColumnaSimple");
        }
    
        public virtual ObjectResult<FilaApilada_Result> FilaApilada()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FilaApilada_Result>("FilaApilada");
        }
    
        public virtual ObjectResult<TOP10_Result> TOP10()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TOP10_Result>("TOP10");
        }
    
        public virtual ObjectResult<TEColonesEntregados_Result> TEColonesEntregados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TEColonesEntregados_Result>("TEColonesEntregados");
        }
    
        public virtual ObjectResult<ToneladasSede_Result> ToneladasSede()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ToneladasSede_Result>("ToneladasSede");
        }
    }
}
